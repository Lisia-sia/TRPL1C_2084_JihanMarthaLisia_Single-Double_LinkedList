// Class Node
class Node<T> {
  T? nodeValue;       // Menyimpan data/value dari node
  Node<T>? next;      // Menunjuk ke node berikutnya

  // Default constructor tanpa nilai awal
  Node() {
    nodeValue = null;
    next = null;
  }

  // Constructor dengan parameter item
  Node.withValue(T item) {
    nodeValue = item;
    next = null;
  }
}

// Class SingleLinkedList
class SingleLinkedList<T> {
  Node<T>? head;

  // Menambahkan node di akhir list
  void append(T value) {
    Node<T> newNode = Node.withValue(value);
    if (head == null) {
      head = newNode;
    } else {
      Node<T>? current = head;
      while (current!.next != null) {
        current = current.next;
      }
      current.next = newNode;
    }
  }

  // Menampilkan semua isi linked list
  void display() {
    Node<T>? current = head;
    while (current != null) {
      print(current.nodeValue);
      current = current.next;
    }
  }

  // Menghapus node pertama dengan nilai tertentu
  void delete(T value) {
    if (head == null) return;

    if (head!.nodeValue == value) {
      head = head!.next;
      return;
    }

    Node<T>? current = head;
    while (current!.next != null) {
      if (current.next!.nodeValue == value) {
        current.next = current.next!.next;
        return;
      }
      current = current.next;
    }
  }

  // Menyisipkan nilai di awal list
  void insertFirst(T value) {
    Node<T> newNode = Node.withValue(value);
    newNode.next = head;
    head = newNode;
  }

  // Mengembalikan true jika nilai ditemukan dalam list
  bool contains(T value) {
    Node<T>? current = head;
    while (current != null) {
      if (current.nodeValue == value) return true;
      current = current.next;
    }
    return false;
  }
}
void main() {
  var list = SingleLinkedList<String>();
  list.append("satu");
  list.append("dua");
  list.display(); // Output: satu dua
}
