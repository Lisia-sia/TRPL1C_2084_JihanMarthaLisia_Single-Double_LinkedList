// Implementasi Doubly Linked List nomor 4 dengan Dart

// Class untuk node
class DNode<T> {
  T data;
  DNode<T>? next;
  DNode<T>? prev;

  DNode(this.data);

  @override
  String toString() {
    return data.toString();
  }
}

// Class untuk Double Linked List
class DoubleLinkedList<T> {
  DNode<T>? head;
  DNode<T>? tail;

  // Constructor
  DoubleLinkedList();

  // Method untuk menambahkan node di depan
  void tambahNodeDepan(DNode<T> newNode) {
    if (head == null) {
      head = newNode;
      tail = newNode;
    } else {
      newNode.next = head;
      head!.prev = newNode;
      head = newNode;
    }
  }

  // Method untuk menambahkan node di akhir
  void tambahNodeAkhir(DNode<T> newNode) {
    if (head == null) {
      head = newNode;
      tail = newNode;
    } else {
      tail!.next = newNode;
      newNode.prev = tail;
      tail = newNode;
    }
  }

  // Method untuk menambahkan node sebelum node tertentu (pembacaan maju)
  void tambahNode_Sebelum(DNode<T> newNode, DNode<T> target) {
    if (head == null) return;
    
    if (head!.data == target.data) {
      tambahNodeDepan(newNode);
      return;
    }
    
    DNode<T>? current = head;
    
    while (current != null) {
      if (current.data == target.data) {
        newNode.next = current;
        newNode.prev = current.prev;
        current.prev!.next = newNode;
        current.prev = newNode;
        return;
      }
      current = current.next;
    }
  }

  // IMPLEMENTASI NOMOR 4
  // Method untuk menambahkan node setelah node tertentu (pembacaan mundur)
  void tambahNode_SetelahBacaMundur(DNode<T> newNode, DNode<T> target) {
    DNode<T>? current = tail;
    
    while (current != null) {
      if (current.data == target.data) {
        if (current == tail) {
          tambahNodeAkhir(newNode);
        } else {
          newNode.next = current.next;
          newNode.prev = current;
          current.next!.prev = newNode;
          current.next = newNode;
        }
        return;
      }
      current = current.prev;
    }
  }

  // Method untuk menambahkan node sebelum node tertentu (pembacaan mundur)
  void tambahNode_SebelumBacaMundur(DNode<T> newNode, DNode<T> target) {
    if (tail == null) return;
    
    if (tail!.data == target.data) {
      newNode.next = tail;
      newNode.prev = tail!.prev;
      
      if (tail!.prev != null) {
        tail!.prev!.next = newNode;
      } else {
        head = newNode;
      }
      
      tail!.prev = newNode;
      return;
    }
    
    DNode<T>? current = tail;
    
    while (current != null) {
      if (current.data == target.data) {
        newNode.next = current;
        newNode.prev = current.prev;
        current.prev!.next = newNode;
        current.prev = newNode;
        return;
      }
      current = current.prev;
    }
  }

  // Method untuk menambahkan node setelah node tertentu (pembacaan maju)
  void tambahNode_Setelah(DNode<T> newNode, DNode<T> target) {
    DNode<T>? current = head;
    
    while (current != null) {
      if (current.data == target.data) {
        if (current == tail) {
          tambahNodeAkhir(newNode);
        } else {
          newNode.next = current.next;
          newNode.prev = current;
          current.next!.prev = newNode;
          current.next = newNode;
        }
        return;
      }
      current = current.next;
    }
  }

  // Method untuk mengonversi list ke string
  @override
  String toString() {
    if (head == null) return "Double Linked List Kosong";
    
    StringBuffer result = StringBuffer();
    DNode<T>? current = head;
    
    result.write("[");
    
    while (current != null) {
      result.write(current.data);
      
      if (current.next != null) {
        result.write(", ");
      }
      
      current = current.next;
    }
    
    result.write("]");
    return result.toString();
  }

  // Method untuk mendapatkan string dengan format khusus untuk pembacaan mundur
  String toStringBack() {
    if (head == null) return "Double Linked List Kosong";
    
    StringBuffer result = StringBuffer();
    DNode<T>? current = tail;
    List<T> items = [];
    
    while (current != null) {
      items.add(current.data);
      current = current.prev;
    }
    
    items = items.reversed.toList();
    
    result.write("[");
    
    for (int i = 0; i < items.length; i++) {
      result.write(items[i]);
      
      if (i < items.length - 1) {
        result.write(", ");
      }
    }
    
    result.write("]");
    return result.toString();
  }
}

// Demo class untuk nomor 4
class DoubleLinkedListDemo {
  static void main() {
    DoubleLinkedList<String> DList = DoubleLinkedList<String>();
    print(DList.toString());
    DList.tambahNodeAkhir(DNode<String>("ungu"));
    print("Tambah Node di Akhir[List Kosong]: " + DList.toString());
    DList.tambahNodeDepan(DNode<String>("merah"));
    print("Tambah Node di Depan: " + DList.toString());
    DList.tambahNodeDepan(DNode<String>("ungu"));
    print("Tambah Node di Depan: " + DList.toString());
    DList.tambahNodeAkhir(DNode<String>("kuning"));
    print("Tambah Node di Akhir: " + DList.toString());
    print("Tambah Node di Depan(Baca Mundur): " + DList.toStringBack());
    
    DList.tambahNode_SebelumBacaMundur(DNode<String>("coklat"), 
        DNode<String>("merah"));
    print("Tambah Node Sebelum Target(Target di Tengah List): " + 
        DList.toString());
    
    DList.tambahNode_SebelumBacaMundur(DNode<String>("coklat"), 
        DNode<String>("kuning"));
    print("Tambah Node Sebelum Target(Target di Akhir List): " + 
        DList.toString());
    
    DList.tambahNode_SebelumBacaMundur(DNode<String>("pink"), 
        DNode<String>("ungu"));
    print("Tambah Node Sebelum Target(Target di Depan List): " + 
        DList.toString());
    
    DList.tambahNode_SebelumBacaMundur(DNode<String>("hijau"), 
        DNode<String>("ungu"));
    print("Tambah Node Sebelum Target(Target di Depan List): " + 
        DList.toString());
  }
}

void main() {
  print("=== DEMO UNTUK NOMOR 4 ===");
  DoubleLinkedListDemo.main();
}
